plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

def mcBase = getMinecraftBaseVersion()
def snapshotEnv = providers.environmentVariable("SNAPSHOT")
def isSnapshot = snapshotEnv.isPresent() && snapshotEnv.get().toBoolean()

version = "${mcBase}.${project.mod_version}${isSnapshot ? "-SNAPSHOT" : ""}"
group = project.maven_group

base {
    archivesName =project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_full_version}"
    implementation "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
}

repositories {
    mavenLocal()

    maven {
        name = "Kubejs"
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            neoforge_base_two      : mcBase,
            neoforge_loader_version: neoforge_loader_version,
            neoforge_full_version: neoforge_full_version,
            version                : version,
            neo_version_range: neo_version_range,
            kubejs_version       : kubejs_version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        def naniteSecret = providers.environmentVariable("NANITE_TOKEN");
        if (naniteSecret.isPresent()) {
            maven {
                url "https://maven.nanite.dev/${isSnapshot ? "snapshots" : "releases"}"
                credentials {
                    username = "nanite"
                    password = naniteSecret.get()
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = project.version
    file = project.provider { project.tasks.jar }.flatMap { it.archiveFile }
    modLoaders.add("neoforge")
    type = STABLE
    displayName = "[${minecraft_version}] KubeUtils ${project.version}"

    curseforge {
        projectId = curseforge_id
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(JavaVersion.VERSION_17)

        requires("kubejs")
    }

    modrinth {
        projectId = modrinth_id
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${minecraft_version}")
        requires("kubejs")
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "Nanite/KubeUtils"
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}

/**
 * Removes the 1. from Minecraft's version, then adds a 0 to the end if the
 * version does not contain three dots.
 */
def getMinecraftBaseVersion() {
    def version = project.minecraft_version
    def parts = version.split("\\.")

    // Remove the first part of the version
    parts = parts[1..-1]

    if (parts.size() < 2) {
        parts << "0"
    }

    return parts.join(".")
}
